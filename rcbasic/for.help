FOR var=start TO end [STEP expr]
  NEXT [var]

  The FOR statement allows you to build controlled loops into your programs.
FOR requires a variable to store the current loop value in as well as the
start and ending values for the loop.  The loop will end when the value in
the loop variable exceeds the end value.

  STEP is optional and if omitted a step of 1 is assumed.  If STEP is provided
then the expression following STEP is added to the loop variable each time
through the loop.

  NEXT proves the endpoint of the loop.  The variable referenced in NEXT is
optional if the NEXT is referring to the FOR at the same level.  It is also
possible to specify a variable for NEXT that is in an outer loop, in this case
all loops inside of the referenced outer loop will cease to exist and
execution continues with the referenced loop.

Examples:

10 FOR I=1 TO 10
20 PRINT I;" ";
30 NEXT I

RUN
     1 2 3 4 5 6 7 8 9 10

10 FOR I=1 TO 10 STEP 3
20 PRINT I;" ";
30 NEXT I

RUN
     1 4 7 10

10 FOR I=1 TO 5
20 FOR J=1 TO 10
30 PRINT I,J
40 IF J=2 NEXT I:END
50 NEXT J
60 PRINT "WILL NEVER SEE THIS"
70 NEXT I

RUN     1        1
        1        2
        2        1
        2        2
        3        1
        3        2
        4        1
        4        2
        5        1
        5        2

  This last example may require a bit of explanation so that you will
understand why the results are the way they are.  In line 40 we are testing
for J=2 and if so we execute NEXT I.  At this point loop J is the innermost
nested loop, but by using NEXT I this will terminate the J loop right where
it is and start the next iteration of the I loop.  When the I loop finishes
the END following the NEXT I is the next executed statement, which ends the
program so the print at line 60 will never be seen.
